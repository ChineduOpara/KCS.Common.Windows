<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KCS.Common.Controls</name>
    </assembly>
    <members>
        <member name="T:KCS.Common.Controls.CountryComboBox">
            <summary>
            Displays cultures.
            </summary>
            <remarks>This control can later be extended to custom-draw country flags or even fonts.</remarks>
        </member>
        <member name="T:KCS.Common.Controls.KCSComboBox">
            <summary>
            Extends the generic ComboBox.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raised when an item is selected or deselected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSComboBox.ResizeToLongestItem">
            <summary>
            Adjusts the width of the combobox to acommodate the longest string.
            </summary>
            <remarks>
            Right now it handles just a handful of types. We need a way to make it handle bound ALL types.
            </remarks>
        </member>
        <member name="P:KCS.Common.Controls.KCSComboBox.RaiseSelectedIndexChangedEvent">
            <summary>
            If TRUE, the control raises the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSComboBox.ReadOnly">
            <summary>
            If TRUE, the control does not allow selection.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CountryComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CountryComboBox.BindData">
            <summary>
            Displays all the countries.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CountryComboBox.DropDownStyle">
            <summary>
            Hide the base DropDownStyle property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CountryComboBox.DataSource">
            <summary>
            Hide the base DataSource property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CountryComboBox.SelectedItem">
            <summary>
            Gets or sets the selected Country.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CountryComboBox.SelectedValue">
            <summary>
            Gets or sets the selected Country code.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSBaseForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSBaseForm.ApplicationIdle(System.Object,System.EventArgs)">
            <summary>
            Idle processing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSBaseForm.OnFormShown(System.EventArgs)">
            <summary>
            This is called ONLY the first time the form is painted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:KCS.Common.Controls.KCSBaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSBaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSBaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSButton">
            <summary>
            Custom button that supports angled text.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the text onto the control at the desired angle.
            </summary>
            <param name="e">Event argument.</param>
        </member>
        <member name="P:KCS.Common.Controls.KCSButton.TextAngle">
            <summary>
            Gets or sets the angle at which the Text will be rendered.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSButton.Text">
            <summary>
            Gets or sets the Text to be rendered on the button's face.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.NonFocusableButton">
            <summary>
            Represents a button that is not selectable (user cannot set focus to it).
            </summary>
            <remarks>This is for the "tall" buttons used for expand/collapse functions.</remarks>
        </member>
        <member name="M:KCS.Common.Controls.NonFocusableButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.HistoryComboBox">
            <summary>
            This comboxbox preserves the history if items typed into it (after user presses enter).
            It uses an instance of the ValuesTracker component (in Standalone mode).
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.HistoryComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.HistoryComboBox.OnHandleCreated(System.EventArgs)">
            <summary>
            When the handle is created, get the history from isolated storage.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryComboBox.OnHandleDestroyed(System.EventArgs)">
            <summary>
            When the control is destroyed, save the items to isolated storage.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryComboBox.Add(System.String)">
            <summary>
            Adds the given Text to the Items collection.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            The ENTER key attempts to add the current Text (if any) to the history list.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.HistoryComboBox.AutoAddTextOnEnterKey">
            <summary>
            If set, the ENTER key attempts to add the current text, if any, to the history list.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.CultureComboBox">
            <summary>
            Displays cultures.
            </summary>
            <remarks>This control can later be extended to custom-draw country flags or even fonts.</remarks>
        </member>
        <member name="M:KCS.Common.Controls.CultureComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CultureComboBox.BindData">
            <summary>
            Displays all the cultures.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CultureComboBox.DropDownStyle">
            <summary>
            Hide the base DropDownStyle property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CultureComboBox.DataSource">
            <summary>
            Hide the base DataSource property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CultureComboBox.SelectedValue">
            <summary>
            Gets or sets the selected Culture code.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.DataGridViewColumnGroup">
            <summary>
            Represents a single column group.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KCS.Common.Controls.DataGridViewColumnGroup.#ctor(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="id">Key.</param>
            <param name="headerText">Header Text.</param>
        </member>
        <member name="M:KCS.Common.Controls.DataGridViewColumnGroup.SetImage">
            <summary>
            Sets the image that will be used for the header.
            </summary>
            <param name="refresh">Force a re-generation of the image.</param>
        </member>
        <member name="M:KCS.Common.Controls.DataGridViewColumnGroup.GetTotalWidth">
            <summary>
            Gets the total width of all the columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KCS.Common.Controls.DataGridViewColumnGroup.GetLeftWidth(System.Int32)">
            <summary>
            Get the total widths of the columns BEFORE this a given column.
            </summary>
            <param name="columnRelativeIndex">Index of the column relative to the others in the DataGridView.</param>
            <returns></returns>
        </member>
        <member name="P:KCS.Common.Controls.DataGridViewColumnGroup.Top">
            <summary>
            This cannot be a negative number.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.DataGridViewColumnGroup.Height">
            <summary>
            This cannot be a negative number.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.DataGridViewColumnGroup.ID">
            <summary>
            Contains the group's Unique ID.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.DataGridViewColumnGroup.GroupName">
            <summary>
            Name of the group. This is different from the Text.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.DataGridViewColumnGroup.Text">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSDataGridView">
            <summary>
            Base class for all the specialized DataGridViews. Provides batch functions and special events. It also associates with
            an AssociatedToolStrip, to allow for item operations.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnItemsDragDropping">
            <summary>
            Raises the Items Drag Dropping event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnItemsDragDropped(System.Boolean)">
            <summary>
            Raises the Items Drag Dropped event.
            </summary>
            <param name="success">True if the operation was successful.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Clean up.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetVisibleRows">
            <summary>
            Gets all rows displayed in the grid's window.
            </summary>
            <returns>Rows.</returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetSelectedRows(System.Boolean)">
            <summary>
            Gets the physically selected rows, taking into consideration the DataGridView's SelectionMode.
            </summary>
            <returns>Selected rows.</returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetSelectedCells">
            <summary>
            Gets all the selected cells, keyed by Row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.EnableColumnSorting(System.Boolean)">
            <summary>
            Enables or disables sorting on the columns. When enabled, sorting
            is automatic. Call this method only AFTER columns have been added.
            </summary>
            <param name="enable">Enabled setting.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetColumnByDataPropertyName(System.String)">
            <summary>
            Gets the first column with the given DataPropertyName.
            </summary>
            <param name="dataPropertyName">DataPropertyName for which to search.</param>
            <returns>A single column.</returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Paints the background, and paints the phantom text if necessary.
            </summary>
            <param name="m">Message being processed.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            "Clean" the background.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.CopySelectedCells">
            <summary>
            Copies the selected cells, into the clipboard and into the CopiedData property.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.CutSelectedCells">
            <summary>
            Copies and clears the selected cells.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.PasteIntoSelectedCells">
            <summary>
            Pastes from the CopiedData table. This assumes that the DataSource is a DataTable.
            If it is not, then handle the DataPasting event, set Cancel to TRUE, and implement
            the pasting yourself.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.SelectAll">
            <summary>
            Selects all rows.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.SelectNone">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.InvertSelection">
            <summary>
            Inverts the selection.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Simulate clicking a Row.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Simulate double-clicking a Row.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <summary>
            When a row is added, set the Dirty Flag.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
            <summary>
            When a row is removed, set the Dirty flag.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.DoDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Simulate dragging and dropping.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.DoDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Simulate dragging over.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Ensures that the user cannot drag-and-drop an item from a control to SAME control. It also ensures that only
            the "acceptable" types can be dropped onto it. This includes FileDrops (so we can drag files in from Explorer).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Simulate the beginning of a drag event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raised when the mouse moves over the control.
            </summary>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            As soon as a cell value is changed, set the row to Modified, so that we don't have to leave that row.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Trim spaces!
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            Paint column group headers, if any.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetColumnGroup(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Gets Column groups by column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetColumnGroupByGroupName(System.String)">
            <summary>
            Gets Column groups by GroupName.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.GetColumnGroup(System.String)">
            <summary>
            Gets Column groups by ID.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:KCS.Common.Controls.KCSDataGridView.SelectRow``1(System.String,``0)">
            <summary>
            Selects the row with the matching value in a particular column. It examines
            only the visible columns.
            </summary>
            <param name="columnName">Column name to examine.</param>
            <param name="value">Value to match against.</param>
            <returns>Index of matching row. If nothing was found, returns -1</returns>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.CellForeColorBrush">
            <summary>
            Brush with the fore color of the cell text.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.HeaderCellBackColorBrush">
            <summary>
            Brush with the background color of the header cells.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.ChangedRowHeaderBackColor">
            <summary>
            Gets or sets the color that's used to indicate a changed or added row.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.CopiedData">
            <summary>
            If anything was copied, this table will contain it.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.IsDirty">
            <summary>
            Indicates that the grid has uncommitted changes.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.DataTable">
            <summary>
            Contains the DataSource, cast as a DataTable. Use this property only when the control has been
            bound to a DataTable.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.DataView">
            <summary>
            Contains the DataSource, cast as a DataView. Use this property only when the control has been
            bound to a DataView.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.AllowDrag">
            <summary>
            If set, rows can be dragged out of the control.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.ShowPhantomText">
            <summary>
            If set, the control displays some phantom text when there are no Rows.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.PhantomText">
            <summary>
            This is the phantom text that will be displayed when there are no Rows.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.AltPhantomText">
            <summary>
            This is the alternate phantom text that will be displayed when there are no ListItems.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.AcceptableDragDropTypes">
            <summary>
            Contains the acceptable types that can be drag-and-dropped onto this ListView.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.IsAnyCellSelected">
            <summary>
            Returns true if any cell is selected, in any mode.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.RowClick">
            <summary>
            Raised when a row is clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.RowDoubleClick">
            <summary>
            Raised when a row is double-clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.ItemsDragDropping">
            <summary>
            Raised when items are being drag-dropped onto this Control.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.ItemsDragDropped">
            <summary>
            Raised after items were drag-dropped onto this Control.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.DataCopying">
            <summary>
            Raised just before data is copied into the internal buffer.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSDataGridView.DataPasting">
            <summary>
            Raised just before data is pasted back into the cell.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSDataGridView.CurrentRow">
            <summary>
            Intelligently returns the currently-selected row.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ExtendedSplitContainer">
            <summary>
            Enhances the standard SplitContainer by allowing coloring of the splitter bar (defaults to ControlDark),
            and making the splitter slightly larger.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.ExtendedSplitContainer.DefaultSplitterColor">
            <summary>
            Default color for the splitter bar.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedSplitContainer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedSplitContainer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the splitter.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedSplitContainer.SplitterColor">
            <summary>
            Gets or sets the Splitter color.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ExtendedListView">
            <summary>
            Base class for all the specialized ListViews. Provides batch functions and special events. It also associates with
            an ExtendedListViewToolStrip, to allow for item operations.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnItemsDragDropping">
            <summary>
            Raises the Items Drag Dropping event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnItemsDragDropped(System.Boolean)">
            <summary>
            Raises the Items Drag Dropped event.
            </summary>
            <param name="success">True if the operation was successful.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDeletingSelected(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Deleting Selected event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDeletedSelected(System.Object,KCS.Common.Shared.SuccessEventArgs)">
            <summary>
            Raises the Deleted Selected event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDeletingAll(System.Object,System.EventArgs)">
            <summary>
            Raises the Deleting All event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDeletedAll(System.Object,KCS.Common.Shared.SuccessEventArgs)">
            <summary>
            Raises the Deleted All event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Paints the background, and paints the phantom text if necessary.
            </summary>
            <param name="m">Message being processed.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.ApplicationIdle(System.Object,System.EventArgs)">
            <summary>
            Idle processing. Sets the properties of the embedded ToolStrip, if any.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.InitializeColumns(System.String[])">
            <summary>
            Builds the ListView columns based on just their names.
            </summary>
            <param name="columns">Column names.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.InitializeColumns(System.Collections.Generic.KeyValuePair{System.String,System.Int32}[])">
            <summary>
            Builds the ListView columns, allowing user to specify the column sizes.
            </summary>
            <param name="columns">Column name/size pairs.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.SelectAll">
            <summary>
            Selects all items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.SelectNone">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.InvertSelection">
            <summary>
            Inverts the selection.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.SelectSingle(System.String)">
            <summary>
            Selects a single item, by key.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.CheckAll">
            <summary>
            Checks all items (only if the ListView's CheckBoxes property is TRUE, obviously).
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.CheckNone">
            <summary>
            Unchecks all items (only if the ListView's CheckBoxes property is TRUE, obviously)..
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.InvertChecked">
            <summary>
            Inverts the Checks.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnClick(System.EventArgs)">
            <summary>
            Called when an item is clicked. It guarantees that the ItemClick event is only bubbled up if an item was clicked.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDoubleClick(System.EventArgs)">
            <summary>
            Called when an item is double-clicked. It guarantees that the ItemClick event is only bubbled up if an item was clicked.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Called when an item is selected or deselected. It only bubbles up the SelectedIndexChanged event if
            RaiseSelectedIndexChangedEvent is TRUE. In addition, if RaiseSelectedIndexChangedEventOnSelection is TRUE,
            it only bubbles up if at least 1 item is selected.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.Add(System.Windows.Forms.ListViewItem)">
            <summary>
            Adds an item to the ListView and sets the IsListChanged flag.
            </summary>
            <param name="listViewItem">ListViewItem to add.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.AddRange(System.Windows.Forms.ListViewItem[])">
            <summary>
            Adds an item to the ListView and sets the IsListChanged flag.
            </summary>
            <param name="listViewItems">Array of ListViewItems to be added.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.DeleteAll(System.Boolean)">
            <summary>
            Removes all items, with optional confirmation.
            </summary>
            <param name="requireConfirmation">If TRUE, the user is prompted to confirm the action.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.DeleteSelected(System.Boolean)">
            <summary>
            Removes selected items, with optional confirmation.
            </summary>
            <param name="requireConfirmation">If TRUE, the user is prompted to confirm the action.</param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Begin drag-and-drop operations. It uses the custom DragDropObject, which includes a pointer to the source control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.DoDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Simulate dragging and dropping.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.DoDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Simulate dragging over.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Ensures that the user cannot drag-and-drop an item from a control to SAME control. It also ensures that only
            the "acceptable" types can be dropped onto it. This includes FileDrops (so we can drag files in from Explorer).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnResize(System.EventArgs)">
            <summary>
            Called when the control is resized for any reason. If ResizableColumnIndex is set, resize the appropriate column.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle the CTRL+A and DEL key sequences, for SELECT ALL and DELETE, respectively.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.ShowPhantomText">
            <summary>
            If set, the control displays some phantom text when there are no ListItems.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.PhantomText">
            <summary>
            This is the phantom text that will be displayed when there are no ListItems.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.AltPhantomText">
            <summary>
            This is the alternate phantom text that will be displayed when there are no ListItems.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.RaiseSelectedIndexChangedEvent">
            <summary>
            If set, the control bubbles up the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.RaiseSelectedIndexChangedEventOnSelection">
            <summary>
            If set, the control bubbles up the SelectedIndexChanged event ONLY when there's at least one item selected.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.AcceptableDragDropTypes">
            <summary>
            Contains the acceptable types that can be drag-and-dropped onto this ListView.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.FillColumnIndex">
            <summary>
            Gets or sets the index of the column that will be automatically resized.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.EnableDeleteSelectedByKey">
            <summary>
            If TRUE, the the DEL keystroke triggers Delete.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedListView.SelectedItem">
            <summary>
            Contains the first selected item.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.ItemClick">
            <summary>
            Raised when an item is clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.ItemDoubleClick">
            <summary>
            Raised when an item is double-clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.DeletingSelected">
            <summary>
            Raised when one or more selected items are being deleted.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.DeletedSelected">
            <summary>
            Raised after one or more selected items were deleted.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.DeletingAll">
            <summary>
            Raised when all items are being deleted.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.DeletedAll">
            <summary>
            Raised when all items were deleted.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.ItemsDragDropping">
            <summary>
            Raised when items are being drag-dropped onto this Control.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ExtendedListView.ItemsDragDropped">
            <summary>
            Raised after items were drag-dropped onto this Control.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ButtonPanel">
            <summary>
            Puts standard OK and Cancel buttons on a Bottom-docked Panel. Also exposes properties to set their text.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.FormatOKButtonText">
            <summary>
            Formats the OK Button Text, based on whether the Image property has a value or not.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.CreateControls">
            <summary>
            Creates the embedded controls.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel._Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Raised when any of the buttons is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw a horizontal line to separate the panel from the rest of the form.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnAcceptClicked">
            <summary>
            Raises the OKClicked event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnCancelClicked">
            <summary>
            Raises the OKClicked event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnAcceptMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the AcceptMouseDown event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnCancelMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the CancelMouseDown event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnAcceptMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the AcceptMouseUp event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ButtonPanel.OnCancelMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the CancelMouseUp event.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.AcceptButtonWidth">
            <summary>
            If set, the OK button is always the form's Accept button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.AutoAcceptButton">
            <summary>
            If set, the OK button is always the form's Accept button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.AutoCancelButton">
            <summary>
            If set, the Cancel button is always the form's Cancel button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.EnableOKButton">
            <summary>
            Enables or disables the OK button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.EnableCancelButton">
            <summary>
            Enables or disables the Close button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.ShowOKButton">
            <summary>
            Shows or hides the OK button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.ShowCancelButton">
            <summary>
            Shows or hides the Cancel button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.ShowSeparator">
            <summary>
            If TRUE, draw a horizontal line to separate these buttons from the rest of the form.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.AutoCloseForm">
            <summary>
            If TRUE, the parent form automatically closes when the buttons are clicked.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ButtonPanel.DialogResult">
            <summary>
            Contains the DialogResult of the button that was clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.AcceptClicked">
            <summary>
            Raised when the Accept button is clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.CancelClicked">
            <summary>
            Raised when the Cancel button is clicked.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.AcceptMouseDown">
            <summary>
            Forwards the MouseDown event of the Accept button.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.CancelMouseDown">
            <summary>
            Forwards the MouseDown event of the Cancel button.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.AcceptMouseUp">
            <summary>
            Forwards the MouseUp event of the Accept button.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ButtonPanel.CancelMouseUp">
            <summary>
            Forwards the MouseUp event of the Cancel button.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.CollapsiblePanel">
            <summary>
            A panel that can be expanded and collapsed.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.CollapsiblePanel.DefaultButtonWidth">
            <summary>
            Default width of the expand/collapse button.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.CollapsiblePanel.DefaultPreferredExpandedWidth">
            <summary>
            Default preferred width of the explanded panel.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.CollapsiblePanel.DefaultExpandCommandText">
            <summary>
            Default button text when the panel is collapsed.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.CollapsiblePanel.DefaultCollapseCommandText">
            <summary>
            Default button text when the panel is expanded.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.CreateChildControls">
            <summary>
            Creates the child controls.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Anytime a control is added, make sure the expand/collapse button is at the back.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel._BtnClick(System.Object,System.EventArgs)">
            <summary>
            Expands or collapses the panel.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.Expand">
            <summary>
            Expands the Panel.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.Collapse">
            <summary>
            Collapses the Panel.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.SetButtonText">
            <summary>
            Displays the appropriate image or text in the button.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.ResetSize">
            <summary>
            Immediately adjust the width or height, based on the direction.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.OnExpanding">
            <summary>
            Raises the Expanding event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.OnExpanded">
            <summary>
            Raises the Expanded event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.OnCollapsing">
            <summary>
            Raises the Collapsing event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CollapsiblePanel.OnCollapsed">
            <summary>
            Raises the Collapsed event.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CollapsiblePanel.Expanding">
            <summary>
            Raised just before the panel expands.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CollapsiblePanel.Collapsing">
            <summary>
            Raised just before the panel collapses.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CollapsiblePanel.Expanded">
            <summary>
            Raised after the panel expands.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CollapsiblePanel.Collapsed">
            <summary>
            Raised after the panel collapses.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.ShowButton">
            <summary>
            Shows or hides the expand/collapse panel.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.CollapsedWidth">
            <summary>
            The width of the control when it is collapsed. This is useful when it is docked and no longer
            controls its own dimensions.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.ExpandedWidth">
            <summary>
            The width of the control when it is expanded. This is useful when it is docked and no longer
            controls its own dimensions.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.PreferredExpandedWidth">
            <summary>
            Gets or sets the preferred width (or height) of the expanded panel.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.IsExpanded">
            <summary>
            Gets or sets Expanded state of the Panel.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.ButtonWidth">
            <summary>
            The width of the expand/collapse button.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.Direction">
            <summary>
            Direction of the panel's contents.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.ExpandCommandText">
            <summary>
            Text to display on the expand/collapse button when the Panel is collapsed.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.CollapseCommandText">
            <summary>
            Text to display on the expand/collapse button when the Panel is expanded.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.ExpandCommandImage">
            <summary>
            Image to display on the expand/collapse button when the Panel is collapsed.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CollapsiblePanel.CollapseCommandImage">
            <summary>
            Image to display on the expand/collapse button when the Panel is expanded.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ColorComboBox">
            <summary>
            Renders a colored dropdown of all the colors.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ColorComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ColorComboBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Paint the background of each item.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ColorComboBox.BindData">
            <summary>
            Displays all the named colors.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ColorComboBox.BindData(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Displays a specific set of colors, sorted by shade.
            </summary>
            <param name="colors">Colors to be displayed.</param>
        </member>
        <member name="M:KCS.Common.Controls.ColorComboBox.ResizeToLongestItem">
            <summary>
            Resizes the control to the longest color name + color sample.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.DrawMode">
            <summary>
            Hides DrawMode.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.SortedByShade">
            <summary>
            If TRUE, the colors are sorted by shade. If FALSE, they are sorted by Name.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.DropDownStyle">
            <summary>
            Hide the base DropDownStyle property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.DataSource">
            <summary>
            Hide the base DataSource property.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.SelectedValue">
            <summary>
            Gets or sets the selected value, by Color Name.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ColorComboBox.SelectedItem">
            <summary>
            Gets or sets the selected Color.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ExtendedLabel">
            <summary>
            Custom Label that supports angled text.
            </summary>
            <remarks>Before using this control, you MUST set AutoSize to FALSE.</remarks>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedLabel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the text onto the control at the desired angle.
            </summary>
            <param name="e">Event argument.</param>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedLabel.TextAngle">
            <summary>
            Gets or sets the angle at which the Text will be rendered.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ExtendedLabel.Text">
            <summary>
            Gets or sets the Text to be rendered on the button's face.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.AsyncProgressBar">
            <summary>
            Displays an instance of NEProgressBar, which indicates "indefinite" progress.
            Apparently this was designed to just relax the users.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBar.Text">
            <summary>
            Gets or sets the message displayed above the progress bar.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.AsyncProgressBarControl">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.Dispose(System.Boolean)">
            <summary>
            Dispose method, for IDisposable pattern.
            </summary>
            <param name="disposing">Disposing flag.</param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.NEProgressBar_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler. Needs documentation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.PositionIndicator(System.Drawing.Rectangle)">
            <summary>
            Needs documentation.
            </summary>
            <param name="rect">Area to be drawn.</param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.DrawBackGround">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.NEProgressBar_Resize(System.Object,System.EventArgs)">
            <summary>
            Resize event handlers.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.tmrAutoProgress_Tick(System.Object,System.EventArgs)">
            <summary>
            Tick event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.AsyncProgressBarControl.InitializeComponent">
            <summary>
            Initializes components.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.SerializeProgressType">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.ProgressType">
            <summary>
            Determines the type of progress bar.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.SerializeNormalImage">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.NormalImage">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.SerializePointImage">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.PointImage">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.ShowBorder">
            <summary>
            Controls visibility of the border.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.NumPoints">
            <summary>
            Number of points in the progressbar.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.Position">
            <summary>
            Position, in percent, of the progress indicator.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.SerializeIndicatorColor">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.IndicatorColor">
            <summary>
            Color of the indicator.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.SerializeProgressStyle">
            <summary>
            Needs documentation.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.ProgressStyle">
            <summary>
            Indicates the progress indicator rotation style.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.AutoProgress">
            <summary>
            Indicates the progress indicator rotation style.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.AutoProgressSpeed">
            <summary>
            Indicates the speed of the progress indicator (1 [slower] to 255 [faster].
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.AsyncProgressBarControl.ProgressBoxStyle">
            <summary>
            Indicates the style of the indicator box.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.AsyncProgressBarControl.OSProgressStyle">
            <summary>
            Progress motion style.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressStyle.LeftOrRight">
            <summary>
            Left or right.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressStyle.LeftAndRight">
            <summary>
            Left and right.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.AsyncProgressBarControl.OSProgressType">
            <summary>
            Progress display type.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressType.Box">
            <summary>
            Box.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressType.Graphic">
            <summary>
            Graphic.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.AsyncProgressBarControl.OSProgressBoxStyle">
            <summary>
            Progress box size style.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressBoxStyle.SolidSameSize">
            <summary>
            Solid, same size.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressBoxStyle.SolidBigger">
            <summary>
            Solid, bigger.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressBoxStyle.SolidSmaller">
            <summary>
            Solid, smaller.
            </summary>
        </member>
        <member name="F:KCS.Common.Controls.AsyncProgressBarControl.OSProgressBoxStyle.BoxAround">
            <summary>
            Box, around.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ValuesTracker">
            <summary>
            Facilitates saving a form's position and values of the child controls (user-entered values only).
            It can also be used standalone (without associating it with a Form). That is, it supports adding and retrieving
            arbitrary values manually (via the overloaded AddValue and GetValue methods).
            In "Form" mode, the data is loaded in the associated form's Load event, and saved in the form's Closing event.
            Data is serialized and saved in an IsolatedStorage file, scoped to the User &amp; Application.
            </summary>
            <remarks>
            Future Improvements:
            1. The first version only works with a Form, but it could potentially be adapted to work with
               User Controls as well.
            2. It enumerates ALL the controls on a Form (even nested ones), and looks at ALL controls.
               However, only a subset of controls accept user input, so only those are automatically tracked.
            3. Any ComboBox (or subclass of same) must have their ValueMember set, in order to work with this
               component.
            </remarks>
            <example>
            To use it with a Form ("Form mode"), at design-time:
            	1. Drop the component on the Form. THAT'S ALL.
            	To add additional values before the controls are restored, do so in this component's Loaded event handler.
            
            To use it WITHOUT a form ("Standalone mode"):
            	1. Instantiate the control with the "storageKey" constructor.
            	2. Use AddValue() as needed.
            	3. Call Save() as needed. This persists the values to disk.
            	4. To reload the values into memory, call Load().
            	5. Call GetValue() as needed, to retrieve specific values by key (the same keys used in the calls
            	    to AddValue() ). You can also call Restore() to simply restore all the stored values to their
            	    matching controls.
            </example>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.#ctor(System.Windows.Forms.Form)">
            <summary>
            Alternate constructor - sets the associated Form and StorageKey.
            </summary>
            <param name="form">Form to be associated with this control.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.#ctor(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Alternate constructor - sets the associated Form and StorageKey, as well as the Auto flag.
            </summary>
            <param name="form">Form to be associated with this control.</param>
            <param name="auto">Initial value of the Auto property.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.#ctor(System.String)">
            <summary>
            Alternate constructor - sets the Auto flag to FALSE.
            </summary>
            <param name="storageKey">Storage key, for persistent storage.
            All instances of this component that share the same key will contain the same values at startup.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.#ctor(System.ComponentModel.IContainer)">
            <summary>   
            Initializes a new instance of the class with the specified container.
            Required by the WinForms designer.
            </summary>   
            <param name="container">An System.ComponentModel.IContainer that represents the container for the Component control.</param>  
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.InitializeComponent">
            <summary>
            Called when the component initializes.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.SetDictionaryData(System.Byte[])">
            <summary>
            Sets a byte array representation of the internal dictionary.
            </summary>
            <param name="data">Data to set.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.GetDictionaryData">
            <summary>
            Gets a byte array representation of the internal dictionary.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.SetControlsToTrack">
            <summary>
            Automatically populate the ControlNames property with ALL the trackable controls
            on the associated Form.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.SubscribeToEventHandlers">
            <summary>
            Subscribes to the Shown, FormClosing, Move, and Resize events of the associated form.
            This allows auto-save and auto-restore, as well as tracking the size and position of the Form.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.FormLoad(System.Object,System.EventArgs)">
            <summary>
            After the associated form is loaded, restores the form's control values (if Auto is true).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            When the form is closing, saves all the values (if Auto is true).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.FormMovedOrResized(System.Object,System.EventArgs)">
            <summary>
            Saves the form's size and location when it is moved or resized.
            Does not apply when the form is minimized.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.TrackFormPosition">
            <summary>
            Tracks the form's size and position.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.Save">
            <summary>
            Saves the values to the data store. If a Form is available, it first saves the child controls values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.Load">
            <summary>
            Loads all the previously-saved values from isolated storage.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.Restore">
            <summary>
            Restores all of the form's state. This method is only valid if there is an associated Form.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.RestoreFormBounds">
            <summary>
            Restores ONLY the location of the associated form.
            If the form falls complete outside the bounds of all the available monitors, this method
            adjusts the form's position.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.RemoveValue(System.String)">
            <summary>
            Removes a value from the collection
            </summary>
            <param name="key">Key of the value to remove.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.RemoveValue(System.Windows.Forms.Control)">
            <summary> 
            Removes a value previously stored for a Control.
            </summary>
            <param name="ctrl">
            Control whose value will be removed. The Fully Qualified Name is used as the value's key.
            </param>
            <returns>Object value, or default.</returns>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.AddValue``1(System.String,``0)">
            <summary>
            Adds an object value. If the key already exists, the value is set instead.
            </summary>
            <param name="key">Value's key.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.AddValue(System.Windows.Forms.Control)">
            <summary>
            Adds a value associated with a control's default property. If the key already exists, the value is set instead.
            </summary>
            <param name="ctrl">
            Control whose value will be stored. The Fully Qualified Name is used as the value's key.
            </param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.AddValues``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Adds multiple values to the internal dictionary.
            </summary>
            <param name="collection">Collection to be added.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.GetValue``1(System.String,``0)">
            <summary> 
            Gets an object value. If the key does not exists, returns the default.
            </summary>
            <param name="key">Key of value to retrieve.</param>
            <param name="default">Default value.</param>
            <returns>Object value.</returns>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.GetValue``1(System.Windows.Forms.Control,``0)">
            <summary> 
            Gets a value previously stored for a Control. If the key does not exists, returns the default.
            </summary>
            <param name="ctrl">
            Control whose value will be retrieved. The Fully Qualified Name is used as the value's key.
            </param>
            <param name="default">Default value.</param>
            <returns>Object value, or default.</returns>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.GetValues">
            <summary> 
            Gets all values.
            </summary>
            <returns>Dictionary of all the values.</returns>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.Clear">
            <summary> 
            Clears all the values and adds the default values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.DeleteDataStore">
            <summary> 
            Deletes the isolated storage file used to store values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.AddDefaultvalues">
            <summary> 
            Adds the default values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnLoading">
            <summary>
            Raises the Loading event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnLoaded(System.Boolean)">
            <summary>
            Raises the Loaded event.
            </summary>
            <param name="success">Success flag.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnRestoring">
            <summary>
            Raises the Restoring event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnRestored(System.Boolean)">
            <summary>
            Raises the Restored event.
            </summary>
            <param name="success">Success flag.</param>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnSaving">
            <summary>
            Raises the Saving event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ValuesTracker.OnSaved(System.Boolean)">
            <summary>
            Raises the Saveded event.
            </summary>
            <param name="success">Success flag.</param>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Loading">
            <summary>
            Raised just before values are loaded from the datastore.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Loaded">
            <summary>
            Raised just after values are loaded from the datastore.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Restoring">
            <summary>
            Raised just before controls values are batch-restored.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Restored">
            <summary>
            Raised just after controls values are batch-restored.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Saving">
            <summary>
            Raised just before controls values are batch-saved.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.ValuesTracker.Saved">
            <summary>
            Raised just after controls values are batch-saved.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.IsRestoring">
            <summary>
            Contains TRUE while the values are being auto-restored.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.ControlNames">
            <summary>
            List of fully-qualified control names for which values will be auto- saved and restored.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.Exceptions">
            <summary>
            Contains all Exceptions generated during the lifetime of the component.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.Form">
            <summary>
            Gets or sets the associated form.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.StorageKey">
            <summary>
            Gets or sets the storage key, which is used to uniquely identify the associated form in the
            data store.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.Dictionary">
            <summary>
            Contains the dictionary of values being tracked.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.ValuesTracker.Auto">
            <summary>
            If set, the form's state is automatically saved or restored after being closed or shown.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSCheckedListBox">
            <summary>
            GGeorgiev 10/27/2008
            Base class for specialized CheckedListBox controls. 
            This class can control CheckedListBox content (copy another CheckedListBox).  
            Extends the standard ListBox control, adding some "batch" methods. - CheckAll, CheckNone -Chinedu Opara
            Extends the standard CheckedListBox, adding DataSource, ValueMember, DisplayMember
            Extends the standard CheckedListBox, adding ability to copy checked list box and get a delimited list of checked values
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.CopyFrom(System.Windows.Forms.CheckedListBox)">
            <summary>
            Copies CheckedListBox
            </summary>
            <param name="source">Source CheckedListBox.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.CopyFrom(KCS.Common.Controls.KCSCheckedListBox)">
            <summary>
            Copies ExtendedCheckedListBox
            </summary>
            <param name="source">ExtendedCheckedListBox</param>
            <remarks>
            Comment from Chinedu: I am not sure why this is different from the OTHER CopyFrom method.
            They should all be in 1 method called Clone (realized from ICloneable).
            </remarks>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.CopyTo(KCS.Common.Controls.KCSCheckedListBox)">
            <summary>
            Copies the checked state of the items in an ExtendedCheckedListBox.
            Rename this later to CopyCheckedState.
            </summary>
            <param name="target">Target control.</param>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.CheckAll">
            <summary>
            Checks all the items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.CheckNone">
            <summary>
            Unchecks all the items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSCheckedListBox.GetCheckedItems``1">
            <summary>
            Gets all the checked items as a specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:KCS.Common.Controls.KCSCheckedListBox.ShowScrollBar">
            <summary>
            Binds IListSource
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSCheckedListBox.IsItemChecked">
            <summary>
            Confirms that at least one item is checked.
            </summary>
            <returns>True or false.</returns>
        </member>
        <member name="T:KCS.Common.Controls.KCSListBox">
            <summary>
            Extends the standard ListBox control, adding some "batch" methods.
            It also allows us to control the SelectedIndexChangedEvent event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.SelectAll">
            <summary>
            Selected all items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.SelectNone">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.RemoveSelectedItems">
            <summary>
            Remove selected items.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Is raised when an item is selected or deselected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSListBox.OnDoubleClick(System.EventArgs)">
            <summary>
            Handle the double-click event on an item.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.KCSListBox.RaiseSelectedIndexChangedEvent">
            <summary>
            If TRUE, the control raises the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSListBox.RaiseSelectedIndexChangedEventOnSelection">
            <summary>
            If TRUE, the control raises the SelectedIndexChanged event ONLY when there's at least one item selected.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSListBox.ItemDoubleClick">
            <summary>
            Raised when an item in the ListBox is double-clicked.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.ExtendedPanel">
            <summary>
            Special Panel that offers some special functionality.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.ExtendedPanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            When a control is added, set the Fore and Back colors.
            </summary>
            <param name="e">Control info.</param>
        </member>
        <member name="T:KCS.Common.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.Delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.New">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.Refresh">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.Save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.Properties.Resources.ValuesTracker">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.SmoothProgressBar">
            <summary>
            A smooth progressbar control.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.SmoothProgressBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.SmoothProgressBar.OnResize(System.EventArgs)">
            <summary>
            Invalidate the control to get a repaint.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.SmoothProgressBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Perform painting.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:KCS.Common.Controls.CSHTextBox">
            <summary>
            Supports color-syntax highliting.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.AddDefinition(System.String,System.String,System.Char,System.Boolean,System.Drawing.Color)">
            <summary>
            Adds a syntax highlighting definition.
            </summary>
            <param name="name"></param>
            <param name="tokens"></param>
            <param name="delimiter"></param>
            <param name="useWordBoundary"></param>
            <param name="color"></param>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.OnCreateControl">
            <summary>
            Enable the interrnal timer.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            When the text is changed, set a flag indicating so.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.ClearSyntaxHighliting">
            <summary>
            Clears the syntaxt highlighting.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.OnHighliting">
            <summary>
            Raises the Highliting event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.OnHighlited">
            <summary>
            Raises the Highlited event.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CSHTextBox.SyntaxHighliting">
            <summary>
            Raised just before highliting starts.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.CSHTextBox.SyntaxHighlited">
            <summary>
            Raised just after highliting finishes.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CSHTextBox.EnableSyntaxHighliting">
            <summary>
            Enables or disables color syntax highlighting.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.CSHTextBox.HighlitingDefinition">
            <summary>
            Helper class.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CSHTextBox.HighlitingDefinition.#ctor(System.String,System.Char,System.Boolean,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="tokens"></param>
            <param name="delimiter"></param>
            <param name="useWordBoundary"></param>
            <param name="color"></param>
        </member>
        <member name="T:KCS.Common.Controls.KCSTextBox">
            <summary>
            Base class for specialized textbox controls. This class can control the OnTextChanged event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSTextBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raised when an item is selected or deselected. This event is "bubbled up" only if RaiseTextChangedEvent is TRUE.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSTextBox.OnTextPasting">
            <summary>
            Raises the TextPasting event.
            </summary>
        </member>
        <member name="E:KCS.Common.Controls.KCSTextBox.TextPasting">
            <summary>
            Raised when text is being pasted into the control. If the Success property is true,
            that means that text was successfuly retrieved from the clipboard.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSTextBox.RaiseTextChangedEvent">
            <summary>
            If TRUE, this control raises its OnTextChanged event.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.NumericTextBox">
            <summary>
            Textbox that allows only numeric values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.NumericTextBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.NumericTextBox.ValueIsAllowed(System.Double)">
            <summary>
            Checks to see if the value's sign is allowed.
            </summary>
            <param name="value">Value whose sign will be checked.</param>
            <returns>TRUE if the value's sign is allowed.</returns>
        </member>
        <member name="M:KCS.Common.Controls.NumericTextBox.ConvertToIntegral">
            <summary>
            Attempts to convert the value entered to an integer.
            </summary>
            <returns>TRUE if the value was successfuly converted to an Integer.</returns>
        </member>
        <member name="M:KCS.Common.Controls.NumericTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raised when the Text changes. This method applies any necessary conversions based on the properties. If the
            conversions failed, the original text is restored.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.IntValue">
            <summary>
            Contains the Integer representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.ShortValue">
            <summary>
            Contains the Short representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.DoubleValue">
            <summary>
            Contains the Double representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.DecimalValue">
            <summary>
            Contains the Decimal representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.IsTextChanged">
            <summary>
            Indicates that the Text value has changed.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.AllowNegatives">
            <summary>
            Indicates that the control allows negative values.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericTextBox.AllowDecimals">
            <summary>
            Indicates that the control allows decimal values.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.TransparentTextBox">
            <summary>
            A transparent TextBox.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.CheckBoxToolStripItem">
            <summary>
            A CheckBox that can be placed on a ToolStrip.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CheckBoxToolStripItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.CheckBoxToolStripItem.CheckBoxCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:KCS.Common.Controls.CheckBoxToolStripItem.CheckedChanged">
            <summary>
            Raised when the Checked property changes.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CheckBoxToolStripItem.Text">
            <summary>
            Gets or sets the CheckBox text.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CheckBoxToolStripItem.Checked">
            <summary>
            Gets or sets the Checked state.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.CheckBoxToolStripItem.CheckBox">
            <summary>
            Contains the child CheckBox control.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.HistoryToolStripComboBox">
            <summary>
            Extends the ToolStripComboBox, allowing control of the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.#ctor">
            <summary>
            Constructor. Sets some default property values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.ComboBox_HandleCreated(System.Object,System.EventArgs)">
            <summary>
            When the handle is created, get the history from isolated storage.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.ComboBox_HandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            When the control is destroyed, save the items to isolated storage.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raised when the selection is changed. The event is only bubbled up if RaiseSelectedIndexChangedEvent is TRUE.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.Add">
            <summary>
            Adds the current Text to the Items collection.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.Add(System.String)">
            <summary>
            Adds the given Text to the Items collection.
            </summary>
            <param name="text">Text to add.</param>
        </member>
        <member name="M:KCS.Common.Controls.HistoryToolStripComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            The ENTER key attempts to add the current Text (if any) to the history list.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.HistoryToolStripComboBox.ReadOnly">
            <summary>
            If TRUE, the control does not allow selection.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.HistoryToolStripComboBox.AutoAddTextOnEnterKey">
            <summary>
            If set, the ENTER key attempts to add the current text, if any, to the history list.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.HistoryToolStripComboBox.RaiseSelectedIndexChangedEvent">
            <summary>
            If TRUE, the control raises the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSToolStripComboBox">
            <summary>
            Extends the ToolStripComboBox, allowing control of the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSToolStripComboBox.#ctor">
            <summary>
            Constructor. Sets some default property values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSToolStripComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raised when the selection is changed. The event is only bubbled up if RaiseSelectedIndexChangedEvent is TRUE.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:KCS.Common.Controls.KCSToolStripComboBox.RaiseSelectedIndexChangedEvent">
            <summary>
            If TRUE, the control raises the SelectedIndexChanged event.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSToolStripDropDownButton">
            <summary>
            Adds auto-dropdown functionality to the base ToolStripDropDownButton.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSToolStripDropDownButton.OnMouseHover(System.EventArgs)">
            <summary>
            When the mouse hovers over the control, immediately dropdown the items.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:KCS.Common.Controls.NumericToolStripTextBox">
            <summary>
            Textbox that allows only numeric values.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.NumericToolStripTextBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.NumericToolStripTextBox.ValueIsAllowed(System.Double)">
            <summary>
            Checks to see if the value's sign is allowed.
            </summary>
            <param name="value">Value whose sign will be checked.</param>
            <returns>TRUE if the value's sign is allowed.</returns>
        </member>
        <member name="M:KCS.Common.Controls.NumericToolStripTextBox.ConvertToIntegral">
            <summary>
            Attempts to convert the value entered to an integer.
            </summary>
            <returns>TRUE if the value was successfuly converted to an Integer.</returns>
        </member>
        <member name="M:KCS.Common.Controls.NumericToolStripTextBox.SetValue">
            <summary>
            Raised when the Text changes. This method applies any necessary conversions based on the properties. If the
            conversions failed, the original text is restored.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.LongValue">
            <summary>
            Contains the Long representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.IntValue">
            <summary>
            Contains the Integer representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.ShortValue">
            <summary>
            Contains the Short representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.DoubleValue">
            <summary>
            Contains the Double representation of the value.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.IsTextChanged">
            <summary>
            Indicates that the Text value has changed.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.AllowNegatives">
            <summary>
            Indicates that the control allows negative values.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.NumericToolStripTextBox.AllowDecimals">
            <summary>
            Indicates that the control allows decimal values.
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSTreeNode.Enabled">
            <summary>
            Is the node meant to be enabled or disabled?
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSTreeNode.Checkbox">
            <summary>
            Is the node checked?
            </summary>
        </member>
        <member name="P:KCS.Common.Controls.KCSTreeNode.UniqueID">
            <summary>
            Unique ID for the node.
            </summary>
        </member>
        <member name="T:KCS.Common.Controls.KCSTreeView">
            <summary>
            Base class for specialized treeview controls. This class can control the treeview width based on all expanded nodes width.
            </summary>
        </member>
        <member name="M:KCS.Common.Controls.KCSTreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)">
            <summary>
            Still working on it.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSTreeView.CheckAll(System.Windows.Forms.TreeNode,System.Boolean,System.Boolean)">
            <summary>
            Check or uncheck items.
            </summary>
            <param name="parent"></param>
            <param name="checkedFlag"></param>
            <param name="includeNested"></param>
        </member>
        <member name="M:KCS.Common.Controls.KCSTreeView.GetCheckedNodes(System.Windows.Forms.TreeNodeCollection)">
            <summary>
            Gets all checked nodes, through all levels.
            </summary>
            <param name="checkedFlag"></param>
            <returns></returns>
        </member>
        <member name="P:KCS.Common.Controls.KCSTreeView.HasCheckedNodes">
            <summary>
            Verifies if any nodes have been checked
            </summary>
        </member>
    </members>
</doc>
